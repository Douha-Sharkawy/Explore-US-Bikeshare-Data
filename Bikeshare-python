import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }
    
def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    
    city = input('kindly choose a city: chicago, new york city, washington \n').lower()
    while city not in (CITY_DATA.keys()):
        print("Please enter a valied city name")
        city = input('kindly choose a city: chicago, new york city, washington \n').lower()
   
            
    user_choise = input('kindly choose a value: Month, Day, Both, None \n').lower()
    while user_choise not in (['month', 'day', 'both', 'none']):
        print("please provid a vailed filter")
        user_choise = input('kindly choose a value: Month, Day, Both, None \n').lower() 
        
        
    months = ['january', 'february', 'march', 'april', 'may', 'june']
    if user_choise == 'month' or user_choise == 'both':
        month = input("kindly choose month:  ,January, February, March, April, May, June \n").lower()
        while month not in months:   #Note: while loop inside if statment
            print("Please enter a valied month")
            month = input("kindly choose month: January, February, March, April, May, June \n").lower()
    else:
        month = 'all'        



            
    days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    if user_choise == 'day' or user_choise == 'both':
        day = input("kindly choose day: All, Saturday, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday").lower()

        while day not in days:
            print("Please enter a valied day")
            day = input("kindly choose day , [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday , Sunday] \n").lower()
    else:
        day = 'all'
    
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()
    df['hour'] = df['Start Time'].dt.hour
    
    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        
        df = df[df['month'] == month]
        
    if day != 'all': 
        df = df[df['day_of_week'] == day.title()]
    
    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    print(df['month'].mode()[0])
   
        
    # TO DO: display the most common day of week
    print(df['day_of_week'].mode()[0])     


    # TO DO: display the most common start hour 
    print(df['hour'].mode()[0]) 

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    print(df['start station'].mode()[0]) 

    # TO DO: display most commonly used end station
    print(df['end station'].mode()[0])
     
    

    # TO DO: display most frequent combination of start station and end station trip
    df['trip'] = 'from' + df['start station'] + 'to' + df['end station']
    print(df['trip'].mode()[0])
   
         

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print(df['Trip Duration'].sum())      


    # TO DO: display mean travel time
    print(df['Trip Duration'].mean())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print(df['User Types'].value_counts())      

    # TO DO: Display counts of gender
    try:
        print(df['Gender'].value_counts()) 
    
    except:
        print('gender does not exist')
    # TO DO: Display earliest, most recent, and most common year of birth
    try:
        print(df['Birth Year'].max())
        print(df['Birth Year'].min())
        print(df['Birth Year'].mode()[0])
        

                
    except:
          print('birth year does not exist')     

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_raw_data(city):
    
    raw = input('Would you like to see 5 lines of row data? (yes/no)').lower()
    while raw == 'yes':
        print(df.sample(5))
        if raw == 'no':
            break        
                    
               
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_raw_data(city)
        
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
            
if __name__ == "__main__":
	main()
